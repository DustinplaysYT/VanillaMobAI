<?php
declare(strict_types=1);
namespace jasonwynn10\VanillaEntityAI\entity\passive;

use jasonwynn10\VanillaEntityAI\entity\AnimalBase;
use jasonwynn10\VanillaEntityAI\entity\Collidable;
use jasonwynn10\VanillaEntityAI\entity\Interactable;
use jasonwynn10\VanillaEntityAI\entity\InventoryHolder;
use jasonwynn10\VanillaEntityAI\entity\passiveaggressive\Player;
use pocketmine\entity\Entity;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\item\enchantment\Enchantment;
use pocketmine\item\Item;
use pocketmine\item\ItemFactory;
use pocketmine\item\Shears;

class Sheep extends AnimalBase implements Collidable, Interactable {
	public const NETWORK_ID = self::SHEEP;
	public $width = 1.2;
	public $height = 0.6;

	public function initEntity() : void {
		parent::initEntity(); // TODO: Change the autogenerated stub
	}

	/**
	 * @param int $tickDiff
	 *
	 * @return bool
	 */
	public function entityBaseTick(int $tickDiff = 1) : bool {
		return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
	}

	/**
	 * @return array
	 */
	public function getDrops() : array {
		$cause = $this->lastDamageCause;
		$drops = [];
		if($cause instanceof EntityDamageByEntityEvent) {
			$entity = $cause->getDamager();
			if($entity instanceof Player) {
				$item = $entity->getInventory()->getItemInHand();
				if($item->hasEnchantment(Enchantment::FIRE_ASPECT) or $item->hasEnchantment(Enchantment::FLAME))
					$drops[] = ItemFactory::get(Item::COOKED_MUTTON, 0, mt_rand(1, 3));
			}elseif($entity instanceof InventoryHolder) {
				$item = $entity->getMainHand() ?? ItemFactory::get(Item::AIR);
				if($item->hasEnchantment(Enchantment::FIRE_ASPECT) or $item->hasEnchantment(Enchantment::FLAME))
					$drops[] = ItemFactory::get(Item::COOKED_MUTTON, 0, mt_rand(1, 3));
			}
		}
		if($this->isSheared())
			return $drops;
		$drops[] = ItemFactory::get(Item::WOOL); // TODO: Change the autogenerated stub
		return $drops;
	}

	/**
	 * @return string
	 */
	public function getName() : string {
		return "Sheep";
	}

	/**
	 * @param Entity $entity
	 */
	public function onCollideWithEntity(Entity $entity) : void {
		// TODO: Implement onCollideWithEntity() method.
	}

	public function onPlayerLook(Player $player) : void {
		if($player->getInventory()->getItemInHand() instanceof Shears) {
			$this->getDataPropertyManager()->setString(Entity::DATA_INTERACTIVE_TAG, "Shear");
		}
	}

	public function onPlayerInteract(Player $player) : void {
		if($player->getInventory()->getItemInHand() instanceof Shears) {
			$this->setDataFlag(Entity::DATA_FLAGS, Entity::DATA_FLAG_SHEARED, true);
		}
	}

	public function shear() : self {
		//
	}

	public function setSheared(bool $sheared = true) : self {
		//
	}

	public function isSheared() : bool {
		return false;
	}
}