<?php
declare(strict_types=1);
namespace jasonwynn10\VanillaEntityAI\entity\passive;

use jasonwynn10\VanillaEntityAI\data\ColorToMeta;
use jasonwynn10\VanillaEntityAI\entity\AnimalBase;
use jasonwynn10\VanillaEntityAI\entity\Collidable;
use jasonwynn10\VanillaEntityAI\entity\Interactable;
use jasonwynn10\VanillaEntityAI\entity\InventoryHolder;
use jasonwynn10\VanillaEntityAI\entity\passiveaggressive\Player;
use pocketmine\entity\Entity;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\item\Dye;
use pocketmine\item\enchantment\Enchantment;
use pocketmine\item\Item;
use pocketmine\item\ItemFactory;
use pocketmine\item\Shears;

class Sheep extends AnimalBase implements Collidable, Interactable {
	public const NETWORK_ID = self::SHEEP;
	public $width = 1.2;
	public $height = 0.6;
	private $colorMeta = ColorToMeta::WHITE;
	private $sheared = false;

	public function initEntity() : void {
		parent::initEntity();

		$chance = mt_rand(1, 1000);
		if($chance <= 50) {
			$this->colorMeta = ColorToMeta::LIGHT_GRAY;
		}elseif($chance >= 51 and $chance <= 100) {
			$this->colorMeta = ColorToMeta::GRAY;
		}elseif($chance >= 101 and $chance <= 150) {
			$this->colorMeta = ColorToMeta::BLACK;
		}elseif($chance >= 151 and $chance <= 180) {
			$this->colorMeta = ColorToMeta::BROWN;
		}elseif($chance >= 181 and $chance <= 183) {
			$this->colorMeta = ColorToMeta::PINK;
		}
		if(mt_rand(1, 100) <= 5) {
			$this->setBaby(true);
		}
	}

	/**
	 * @param int $tickDiff
	 *
	 * @return bool
	 */
	public function entityBaseTick(int $tickDiff = 1) : bool {
		// TODO: eat grass to recover wool
		return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
	}

	/**
	 * @return array
	 */
	public function getDrops() : array {
		if(!$this->isBaby()) {
			$cause = $this->lastDamageCause;
			$drops = [];
			if($cause instanceof EntityDamageByEntityEvent) {
				$entity = $cause->getDamager();
				if($entity instanceof Player) {
					$item = $entity->getInventory()->getItemInHand();
					if($item->hasEnchantment(Enchantment::FIRE_ASPECT) or $item->hasEnchantment(Enchantment::FLAME)) {
						$drops[] = ItemFactory::get(Item::COOKED_MUTTON, 0, mt_rand(1, 3));
					}
				}elseif($entity instanceof InventoryHolder) {
					$item = $entity->getMainHand() ?? ItemFactory::get(Item::AIR);
					if($item->hasEnchantment(Enchantment::FIRE_ASPECT) or $item->hasEnchantment(Enchantment::FLAME)) {
						$drops[] = ItemFactory::get(Item::COOKED_MUTTON, 0, mt_rand(1, 3));
					}
				}
			}
			if($this->isSheared()) {
				return $drops;
			}
			$drops[] = ItemFactory::get(Item::WOOL, $this->colorMeta);
			return $drops;
		}else {
			return [];
		}
	}

	public function getXpDropAmount() : int {
		if(!$this->isBaby()) {
			return mt_rand(1, 3);
		}
		return parent::getXpDropAmount();
	}

	/**
	 * @return string
	 */
	public function getName() : string {
		return "Sheep";
	}

	/**
	 * @param Entity $entity
	 */
	public function onCollideWithEntity(Entity $entity) : void {
		// TODO: Implement onCollideWithEntity() method.
	}

	public function onPlayerLook(Player $player) : void {
		if(!$this->isBaby() and $player->getInventory()->getItemInHand() instanceof Shears and !$this->sheared) {
			$this->getDataPropertyManager()->setString(Entity::DATA_INTERACTIVE_TAG, "Shear");
		}
	}

	public function onPlayerInteract(Player $player) : void {
		$hand = $player->getInventory()->getItemInHand();
		if(!$this->isBaby() and $hand instanceof Shears and !$this->sheared) {
			$this->shear();
			//$hand->applyDamage(1); TODO: is this needed here?
			$player->getInventory()->setItemInHand($hand);
		}
		if($hand instanceof Dye) {
			$this->setColor($hand->pop()->getDamage());
			$player->getInventory()->setItemInHand($hand);
		}
	}

	public function shear() : self {
		$this->level->dropItem($this, ItemFactory::get(Item::WOOL, $this->colorMeta, mt_rand(1, 3)));
		$this->setSheared(true);
		return $this;
	}

	public function setSheared(bool $sheared = true) : self {
		$this->sheared = $sheared;
		$this->setDataFlag(Entity::DATA_FLAGS, Entity::DATA_FLAG_SHEARED, $sheared);
		return $this;
	}

	public function isSheared() : bool {
		return $this->sheared;
	}

	public function setColor(int $colorMeta) : self {
		if($colorMeta >= 0 and $colorMeta <= 15) {
			$this->colorMeta = $colorMeta;
			$this->getDataPropertyManager()->setPropertyValue(self::DATA_COLOUR, self::DATA_TYPE_BYTE, $colorMeta);
		}else {
			throw new \OutOfRangeException("Meta value provided is out of range 0 - 15");
		}
		return $this;
	}

	public function getColor() : int {
		return $this->colorMeta;
	}
}