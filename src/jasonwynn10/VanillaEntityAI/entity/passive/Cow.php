<?php
declare(strict_types=1);
namespace jasonwynn10\VanillaEntityAI\entity\passive;

use jasonwynn10\VanillaEntityAI\entity\AgeableTrait;
use jasonwynn10\VanillaEntityAI\entity\AnimalBase;
use jasonwynn10\VanillaEntityAI\entity\Collidable;
use jasonwynn10\VanillaEntityAI\entity\Interactable;
use jasonwynn10\VanillaEntityAI\entity\passiveaggressive\Player;
use pocketmine\entity\Ageable;
use pocketmine\entity\Entity;
use pocketmine\item\Bucket;
use pocketmine\item\Item;
use pocketmine\item\ItemFactory;

class Cow extends AnimalBase implements Collidable, Interactable, Ageable {
	use AgeableTrait;
	public const NETWORK_ID = self::COW;
	public $width = 1.5;
	public $height = 1.2;

	public function initEntity() : void {
		parent::initEntity(); // TODO: Change the autogenerated stub
	}

	/**
	 * @param int $tickDiff
	 *
	 * @return bool
	 */
	public function entityBaseTick(int $tickDiff = 1) : bool {
		return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
	}

	/**
	 * @return array
	 */
	public function getDrops() : array {
		$drops = parent::getDrops();
		if(!$this->isBaby()) {
			if($this->isOnFire()) {
				$drops[] = ItemFactory::get(Item::COOKED_BEEF, 0, mt_rand(1, 3));
			}else{
				$drops[] = ItemFactory::get(Item::RAW_BEEF, 0, mt_rand(1, 3));
			}
			$drops[] = ItemFactory::get(Item::LEATHER, 0, mt_rand(0, 2));
			return $drops;
		}else {
			return $drops;
		}
	}

	public function getXpDropAmount() : int {
		$exp = parent::getXpDropAmount();
		if(!$this->isBaby()) {
			$exp += mt_rand(1, 3);
			return $exp;
		}
		return $exp;
	}

	/**
	 * @return string
	 */
	public function getName() : string {
		return "Cow";
	}

	/**
	 * @param Entity $entity
	 */
	public function onCollideWithEntity(Entity $entity) : void {
		// TODO: Implement onCollideWithEntity() method.
	}

	public function onPlayerLook(Player $player) : void {
		$hand = $player->getInventory()->getItemInHand();
		if($hand instanceof Bucket and $hand->getDamage() === 0) { // check for empty bucket
			$this->getDataPropertyManager()->setString(Entity::DATA_INTERACTIVE_TAG, "Milk");
		}
	}

	public function onPlayerInteract(Player $player) : void {
		$hand = $player->getInventory()->getItemInHand();
		if($hand instanceof Bucket and $hand->getDamage() === 0) { // check for empty bucket
			// milking logic
		}
	}
}